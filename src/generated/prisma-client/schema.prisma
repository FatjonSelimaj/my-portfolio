generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum FileType {
  IMAGE
  PDF
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  email               String               @unique
  password            String
  name                String?
  gender              String               @default("male")
  portfolios          Portfolio[]          @relation("UserPortfolios")
  details             UserDetails?         @relation("UserToDetails")
  articles            Article[]            @relation("UserArticles")
  passwordResetTokens PasswordResetToken[] @relation("UserResetTokens")
}

model UserDetails {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @unique @db.ObjectId
  user           User            @relation("UserToDetails", fields: [userId], references: [id])
  firstName      String
  lastName       String
  bio            String?
  phone          String?
  imageUrl       String?
  paintings      Painting[]      @relation("UserPaintings")
  projects       Project[]       @relation("UserProjects")
  certifications Certification[] @relation("UserCertifications")
  diplomas       Diploma[]       @relation("UserDiplomas")
}

model Painting {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  userDetailsId String      @db.ObjectId
  userDetails   UserDetails @relation("UserPaintings", fields: [userDetailsId], references: [id])
}

model Project {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  url           String
  logoUrl       String
  userDetailsId String      @db.ObjectId
  userDetails   UserDetails @relation("UserProjects", fields: [userDetailsId], references: [id])
}

model Portfolio {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  url       String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation("UserPortfolios", fields: [userId], references: [id])
}

model Article {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation("UserArticles", fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation("UserResetTokens", fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Certification {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  institution   String
  dateAwarded   DateTime
  extractedText String?
  logoUrl       String?
  description   String?
  userDetailsId String      @db.ObjectId
  userDetails   UserDetails @relation("UserCertifications", fields: [userDetailsId], references: [id])
}

model Diploma {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  degree        String
  fieldOfStudy  String
  institution   String
  dateAwarded   DateTime
  diplomaUrl    String?
  fileType      FileType?
  userDetailsId String      @db.ObjectId
  userDetails   UserDetails @relation("UserDiplomas", fields: [userDetailsId], references: [id])
}

model PageVisit {
  userId String @id @map("_id")
  count  Int    @default(0)
}
